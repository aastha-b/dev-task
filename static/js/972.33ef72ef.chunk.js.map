{"version":3,"file":"static/js/972.33ef72ef.chunk.js","mappings":"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","sources":["components/FormModal.tsx"],"sourcesContent":["import {\n  Button,\n  Grid,\n  IconButton,\n  OutlinedInput,\n  Typography,\n  styled,\n} from \"@mui/material\";\nimport React from \"react\";\nimport {\n  IFormFieldDetails,\n  IFormFields,\n  loginFormDetails,\n  signUpFormDetails,\n} from \"../constant\";\n\nimport {\n  ArrowForward,\n  Close,\n  VisibilityOffOutlined,\n  VisibilityOutlined,\n} from \"@mui/icons-material\";\n\ninterface IFormProps {\n  isHomePage: boolean;\n  isLoginPage: boolean;\n  onClose: () => void;\n  showForm: boolean;\n}\n\n// const styles: Record<string, React.CSSProperties> = {};\n\nconst StyledBox = styled(Grid)({\n  maxWidth: \"470px\",\n  // height: \" 420px\",\n  display: \"flex\",\n  justifyContent: \"center\",\n  flexDirection: \"column\",\n  border: \"2px solid #969696\",\n  borderRadius: \"8px\",\n  backgroundColor: \"#27292D\",\n  padding: \"24px 16px\",\n  position: \"fixed\",\n  top: \"calc(50% - 263px)\",\n  left: \"calc(50% - 238px)\",\n});\n\nexport default function FormModal(props: IFormProps) {\n  const { isHomePage, isLoginPage, showForm, onClose } = props;\n  const [loginPage, setLoginPage] = React.useState(isLoginPage);\n  const details = loginPage ? loginFormDetails : signUpFormDetails;\n  const [showPassword, setShowPassword] = React.useState(true);\n\n  const handleClickShowPassword = () => {\n    setShowPassword(!showPassword);\n  };\n  return (\n    <>\n      {showForm && (\n        <StyledBox container>\n          <Grid container flexDirection={\"row\"}>\n            <Grid width={isHomePage ? \"90%\" : \"100%\"}>\n              <Typography color={\"#6B6C70\"} fontWeight={500}>\n                {details.loginHeading1}\n              </Typography>\n              <Typography color={\"#FFFFFF\"} fontWeight={600} fontSize={\"18px\"}>\n                {details.loginHeading2}\n              </Typography>\n            </Grid>\n            {isHomePage && (\n              <Grid\n                container\n                justifyContent={\"center\"}\n                alignItems={\"center\"}\n                bgcolor={\"#131319\"}\n                width={\"32px\"}\n                height={\"32px\"}\n                borderRadius={\"30px\"}\n                onClick={onClose}\n              >\n                <Close\n                  style={{ color: \"white\", width: \"16px\", height: \"16px\" }}\n                ></Close>\n              </Grid>\n            )}\n          </Grid>\n          <Grid\n            container\n            flexDirection=\"column\"\n            alignItems=\"flex-start\"\n            py={\"16px\"}\n          >\n            {Object.keys(details.formFields).map((key) => {\n              const field: IFormFieldDetails = details.formFields[\n                key as keyof IFormFields\n              ] || { label: \"\", placeholder: \"\" };\n              return (\n                <Grid item key={key} width=\"100%\" pb=\"8px\" pt=\"16px\">\n                  <Grid\n                    container\n                    justifyContent=\"space-between\"\n                    alignItems=\"baseline\"\n                  >\n                    <Typography pb=\"8px\" color={\"#C5C7CA\"} fontWeight={500}>\n                      {field.label}\n                    </Typography>\n                    {key === \"password\" && (\n                      <Typography\n                        pb=\"8px\"\n                        color={\"#C5C7CA\"}\n                        fontWeight={500}\n                        fontSize=\"12px\"\n                      >\n                        Forgot password?{\" \"}\n                      </Typography>\n                    )}\n                  </Grid>\n                  <OutlinedInput\n                    type={\n                      key === \"password\" && !showPassword ? \"password\" : \"text\"\n                    }\n                    fullWidth\n                    placeholder={field.placeholder}\n                    sx={{\n                      \"& input::placeholder\": {\n                        color: \"white\",\n                        fontSize: \"16px\",\n                      },\n                      \"& input\": {\n                        color: \"white\",\n                      },\n                    }}\n                    endAdornment={\n                      key === \"password\" ? (\n                        <IconButton\n                          aria-label=\"toggle password visibility\"\n                          onClick={handleClickShowPassword}\n                          edge=\"end\"\n                          sx={{\n                            \"& .MuiSvgIcon-root\": {\n                              color: \"grey\",\n                            },\n                          }}\n                        >\n                          {showPassword ? (\n                            <VisibilityOutlined />\n                          ) : (\n                            <VisibilityOffOutlined />\n                          )}\n                        </IconButton>\n                      ) : undefined\n                    }\n                  />\n                </Grid>\n              );\n            })}\n          </Grid>\n\n          <Button\n            variant=\"contained\"\n            fullWidth\n            sx={{\n              textTransform: \"none\",\n              fontSize: \"16px\",\n            }}\n          >\n            {details.btnCTA}\n          </Button>\n          <Grid container py=\"8px\">\n            <Typography\n              variant=\"body2\"\n              component=\"div\"\n              color={\"#6B6C70\"}\n              fontWeight={500}\n              fontSize={\"14px\"}\n            >\n              {details.subheading}&nbsp;\n            </Typography>\n            <Button\n              sx={{\n                textTransform: \"none\",\n                padding: 0,\n                minWidth: \"auto\",\n                lineHeight: \"inherit\",\n                fontSize: \"14px\",\n                color: \"white\",\n                fontWeight: 500,\n                \"&:hover\": {\n                  textDecoration: \"underline\",\n                },\n              }}\n              onClick={() => setLoginPage(!loginPage)}\n              endIcon={<ArrowForward style={{ fontSize: \"14px\" }} />}\n            >\n              {loginPage ? \"Register\" : \"Login\"}\n            </Button>\n          </Grid>\n        </StyledBox>\n      )}\n    </>\n  );\n}\n"],"names":["StyledBox","styled","Grid","maxWidth","display","justifyContent","flexDirection","border","borderRadius","backgroundColor","padding","position","top","left","FormModal","props","isHomePage","isLoginPage","showForm","onClose","loginPage","setLoginPage","React","details","loginFormDetails","signUpFormDetails","showPassword","setShowPassword","handleClickShowPassword","_jsx","_Fragment","children","_jsxs","container","width","Typography","color","fontWeight","loginHeading1","fontSize","loginHeading2","alignItems","bgcolor","height","onClick","Close","style","py","Object","keys","formFields","map","key","field","label","placeholder","item","pb","pt","OutlinedInput","type","fullWidth","sx","endAdornment","IconButton","edge","VisibilityOutlined","VisibilityOffOutlined","undefined","Button","variant","textTransform","btnCTA","component","subheading","minWidth","lineHeight","textDecoration","endIcon","ArrowForward"],"sourceRoot":""}